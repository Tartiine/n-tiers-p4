@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Login</h3>

<div class="form-group">
    <label for="username">Username</label>
    <input type="text" id="username" class="form-control" @bind="username" />
</div>

<div class="form-group">
    <label for="password">Password</label>
    <input type="password" id="password" class="form-control" @bind="password" />
</div>

<button class="btn btn-primary mt-3" @onclick="HandleLogin" disabled="@isSubmitting">Login</button>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private string username = string.Empty;
    private string password = string.Empty;
    private string errorMessage = string.Empty;
    private bool isSubmitting = false;

    private async Task HandleLogin()
    {
        errorMessage = string.Empty; // Clear any previous error
        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
        {
            errorMessage = "Username and password cannot be empty.";
            return;
        }

        isSubmitting = true; // Disable button while processing
        try
        {
            var request = new { Login = username, Password = password };
            var response = await Http.PostAsJsonAsync("api/auth/login", request);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (result != null)
                {
                    Console.WriteLine($"Login successful! PlayerId: {result.PlayerId}");
                    Navigation.NavigateTo("/list"); // Redirect to the game list page
                }
                else
                {
                    errorMessage = "Invalid server response.";
                }
            }
            else
            {
                errorMessage = $"Login failed: {response.StatusCode}";
                var serverMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Server Response: {serverMessage}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred. Please try again.";
            Console.WriteLine($"Exception: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    public class LoginResponse
    {
        public string Message { get; set; }
        public int PlayerId { get; set; }
    }
}
