@page "/list"
@inject HttpClient Http

<h3 class="text-center my-3">My Games</h3>

@if (isLoading)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (games == null || !games.Any())
{
    <p class="text-center text-muted">No games available.</p>
}
else
{
    <div class="list-group">
        @foreach (var game in games)
        {
            <div class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                    <strong>Game @game.Id</strong><br />
                    <span><strong>Host:</strong> @game.HostName</span><br />
                    <span><strong>Guest:</strong> @game.GuestName</span><br />
                    <span><strong>Status:</strong> @game.Status</span>
                </div>
                <div class="d-flex">
                    <button class="btn btn-primary me-2" @onclick="() => JoinGame(game.Id)">Join</button>
                    <button class="btn btn-danger" @onclick="() => DeleteGame(game.Id)">Delete</button>
                </div>
            </div>
        }
    </div>
}

<div class="text-center mt-4">
    <button class="btn btn-success" @onclick="CreateGame">Create Game</button>
</div>

@code {
    private List<GameDto> games = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadGames();
    }

    private async Task LoadGames()
    {
        isLoading = true;
        try
        {
            games = await Http.GetFromJsonAsync<List<GameDto>>("api/game");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching games: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CreateGame()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("games", new { Status = "WaitingForGuest" });

            if (response.IsSuccessStatusCode)
            {
                var game = await response.Content.ReadFromJsonAsync<GameDto>();
                games.Add(game); 
            }
            else
            {
                Console.WriteLine("Failed to create game");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task JoinGame(int gameId)
    {
        Console.WriteLine($"Joining game with ID: {gameId}");
        // Logique pour rejoindre une partie
    }

    private async Task DeleteGame(int gameId)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/game/{gameId}");
            if (response.IsSuccessStatusCode)
            {
                games = games.Where(g => g.Id != gameId).ToList(); // Supprimer localement
            }
            else
            {
                Console.WriteLine("Failed to delete game");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting game: {ex.Message}");
        }
    }

    public class GameDto
    {
        public int Id { get; set; }
        public string HostName { get; set; }
        public string GuestName { get; set; }
        public string Status { get; set; }
    }
}
